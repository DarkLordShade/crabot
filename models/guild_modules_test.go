// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testGuildModules(t *testing.T) {
	t.Parallel()

	query := GuildModules()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testGuildModulesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GuildModule{}
	if err = randomize.Struct(seed, o, guildModuleDBTypes, true, guildModuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GuildModule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GuildModules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGuildModulesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GuildModule{}
	if err = randomize.Struct(seed, o, guildModuleDBTypes, true, guildModuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GuildModule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := GuildModules().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GuildModules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGuildModulesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GuildModule{}
	if err = randomize.Struct(seed, o, guildModuleDBTypes, true, guildModuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GuildModule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GuildModuleSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GuildModules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGuildModulesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GuildModule{}
	if err = randomize.Struct(seed, o, guildModuleDBTypes, true, guildModuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GuildModule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := GuildModuleExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if GuildModule exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GuildModuleExists to return true, but got false.")
	}
}

func testGuildModulesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GuildModule{}
	if err = randomize.Struct(seed, o, guildModuleDBTypes, true, guildModuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GuildModule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	guildModuleFound, err := FindGuildModule(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if guildModuleFound == nil {
		t.Error("want a record, got nil")
	}
}

func testGuildModulesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GuildModule{}
	if err = randomize.Struct(seed, o, guildModuleDBTypes, true, guildModuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GuildModule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = GuildModules().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testGuildModulesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GuildModule{}
	if err = randomize.Struct(seed, o, guildModuleDBTypes, true, guildModuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GuildModule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := GuildModules().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGuildModulesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	guildModuleOne := &GuildModule{}
	guildModuleTwo := &GuildModule{}
	if err = randomize.Struct(seed, guildModuleOne, guildModuleDBTypes, false, guildModuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GuildModule struct: %s", err)
	}
	if err = randomize.Struct(seed, guildModuleTwo, guildModuleDBTypes, false, guildModuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GuildModule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = guildModuleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = guildModuleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GuildModules().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGuildModulesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	guildModuleOne := &GuildModule{}
	guildModuleTwo := &GuildModule{}
	if err = randomize.Struct(seed, guildModuleOne, guildModuleDBTypes, false, guildModuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GuildModule struct: %s", err)
	}
	if err = randomize.Struct(seed, guildModuleTwo, guildModuleDBTypes, false, guildModuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GuildModule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = guildModuleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = guildModuleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GuildModules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func guildModuleBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *GuildModule) error {
	*o = GuildModule{}
	return nil
}

func guildModuleAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *GuildModule) error {
	*o = GuildModule{}
	return nil
}

func guildModuleAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *GuildModule) error {
	*o = GuildModule{}
	return nil
}

func guildModuleBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GuildModule) error {
	*o = GuildModule{}
	return nil
}

func guildModuleAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GuildModule) error {
	*o = GuildModule{}
	return nil
}

func guildModuleBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GuildModule) error {
	*o = GuildModule{}
	return nil
}

func guildModuleAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GuildModule) error {
	*o = GuildModule{}
	return nil
}

func guildModuleBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GuildModule) error {
	*o = GuildModule{}
	return nil
}

func guildModuleAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GuildModule) error {
	*o = GuildModule{}
	return nil
}

func testGuildModulesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &GuildModule{}
	o := &GuildModule{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, guildModuleDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GuildModule object: %s", err)
	}

	AddGuildModuleHook(boil.BeforeInsertHook, guildModuleBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	guildModuleBeforeInsertHooks = []GuildModuleHook{}

	AddGuildModuleHook(boil.AfterInsertHook, guildModuleAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	guildModuleAfterInsertHooks = []GuildModuleHook{}

	AddGuildModuleHook(boil.AfterSelectHook, guildModuleAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	guildModuleAfterSelectHooks = []GuildModuleHook{}

	AddGuildModuleHook(boil.BeforeUpdateHook, guildModuleBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	guildModuleBeforeUpdateHooks = []GuildModuleHook{}

	AddGuildModuleHook(boil.AfterUpdateHook, guildModuleAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	guildModuleAfterUpdateHooks = []GuildModuleHook{}

	AddGuildModuleHook(boil.BeforeDeleteHook, guildModuleBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	guildModuleBeforeDeleteHooks = []GuildModuleHook{}

	AddGuildModuleHook(boil.AfterDeleteHook, guildModuleAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	guildModuleAfterDeleteHooks = []GuildModuleHook{}

	AddGuildModuleHook(boil.BeforeUpsertHook, guildModuleBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	guildModuleBeforeUpsertHooks = []GuildModuleHook{}

	AddGuildModuleHook(boil.AfterUpsertHook, guildModuleAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	guildModuleAfterUpsertHooks = []GuildModuleHook{}
}

func testGuildModulesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GuildModule{}
	if err = randomize.Struct(seed, o, guildModuleDBTypes, true, guildModuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GuildModule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GuildModules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGuildModulesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GuildModule{}
	if err = randomize.Struct(seed, o, guildModuleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GuildModule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(guildModuleColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := GuildModules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGuildModuleToOneGuildUsingGuild(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local GuildModule
	var foreign Guild

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, guildModuleDBTypes, false, guildModuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GuildModule struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, guildDBTypes, false, guildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Guild struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.GuildID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Guild().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := GuildModuleSlice{&local}
	if err = local.L.LoadGuild(ctx, tx, false, (*[]*GuildModule)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Guild == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Guild = nil
	if err = local.L.LoadGuild(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Guild == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testGuildModuleToOneModuleUsingModule(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local GuildModule
	var foreign Module

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, guildModuleDBTypes, false, guildModuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GuildModule struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, moduleDBTypes, false, moduleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Module struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ModuleID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Module().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := GuildModuleSlice{&local}
	if err = local.L.LoadModule(ctx, tx, false, (*[]*GuildModule)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Module == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Module = nil
	if err = local.L.LoadModule(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Module == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testGuildModuleToOneSetOpGuildUsingGuild(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GuildModule
	var b, c Guild

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, guildModuleDBTypes, false, strmangle.SetComplement(guildModulePrimaryKeyColumns, guildModuleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, guildDBTypes, false, strmangle.SetComplement(guildPrimaryKeyColumns, guildColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, guildDBTypes, false, strmangle.SetComplement(guildPrimaryKeyColumns, guildColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Guild{&b, &c} {
		err = a.SetGuild(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Guild != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GuildModules[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.GuildID != x.ID {
			t.Error("foreign key was wrong value", a.GuildID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GuildID))
		reflect.Indirect(reflect.ValueOf(&a.GuildID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.GuildID != x.ID {
			t.Error("foreign key was wrong value", a.GuildID, x.ID)
		}
	}
}
func testGuildModuleToOneSetOpModuleUsingModule(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a GuildModule
	var b, c Module

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, guildModuleDBTypes, false, strmangle.SetComplement(guildModulePrimaryKeyColumns, guildModuleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, moduleDBTypes, false, strmangle.SetComplement(modulePrimaryKeyColumns, moduleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, moduleDBTypes, false, strmangle.SetComplement(modulePrimaryKeyColumns, moduleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Module{&b, &c} {
		err = a.SetModule(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Module != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GuildModules[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ModuleID != x.ID {
			t.Error("foreign key was wrong value", a.ModuleID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ModuleID))
		reflect.Indirect(reflect.ValueOf(&a.ModuleID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ModuleID != x.ID {
			t.Error("foreign key was wrong value", a.ModuleID, x.ID)
		}
	}
}

func testGuildModulesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GuildModule{}
	if err = randomize.Struct(seed, o, guildModuleDBTypes, true, guildModuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GuildModule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGuildModulesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GuildModule{}
	if err = randomize.Struct(seed, o, guildModuleDBTypes, true, guildModuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GuildModule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GuildModuleSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGuildModulesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GuildModule{}
	if err = randomize.Struct(seed, o, guildModuleDBTypes, true, guildModuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GuildModule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GuildModules().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	guildModuleDBTypes = map[string]string{`GuildID`: `integer`, `ID`: `integer`, `ModuleID`: `integer`}
	_                  = bytes.MinRead
)

func testGuildModulesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(guildModulePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(guildModuleColumns) == len(guildModulePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GuildModule{}
	if err = randomize.Struct(seed, o, guildModuleDBTypes, true, guildModuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GuildModule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GuildModules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, guildModuleDBTypes, true, guildModulePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GuildModule struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testGuildModulesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(guildModuleColumns) == len(guildModulePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GuildModule{}
	if err = randomize.Struct(seed, o, guildModuleDBTypes, true, guildModuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GuildModule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GuildModules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, guildModuleDBTypes, true, guildModulePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GuildModule struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(guildModuleColumns, guildModulePrimaryKeyColumns) {
		fields = guildModuleColumns
	} else {
		fields = strmangle.SetComplement(
			guildModuleColumns,
			guildModulePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := GuildModuleSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testGuildModulesUpsert(t *testing.T) {
	t.Parallel()

	if len(guildModuleColumns) == len(guildModulePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := GuildModule{}
	if err = randomize.Struct(seed, &o, guildModuleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GuildModule struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GuildModule: %s", err)
	}

	count, err := GuildModules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, guildModuleDBTypes, false, guildModulePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GuildModule struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GuildModule: %s", err)
	}

	count, err = GuildModules().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
