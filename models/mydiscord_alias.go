// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// MydiscordAlias is an object representing the database table.
type MydiscordAlias struct {
	ID      int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Source  string `boil:"source" json:"source" toml:"source" yaml:"source"`
	Target  string `boil:"target" json:"target" toml:"target" yaml:"target"`
	GuildID int    `boil:"guild_id" json:"guild_id" toml:"guild_id" yaml:"guild_id"`

	R *mydiscordAliasR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L mydiscordAliasL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MydiscordAliasColumns = struct {
	ID      string
	Source  string
	Target  string
	GuildID string
}{
	ID:      "id",
	Source:  "source",
	Target:  "target",
	GuildID: "guild_id",
}

// MydiscordAliasRels is where relationship names are stored.
var MydiscordAliasRels = struct {
	Guild string
}{
	Guild: "Guild",
}

// mydiscordAliasR is where relationships are stored.
type mydiscordAliasR struct {
	Guild *MydiscordGuild
}

// NewStruct creates a new relationship struct
func (*mydiscordAliasR) NewStruct() *mydiscordAliasR {
	return &mydiscordAliasR{}
}

// mydiscordAliasL is where Load methods for each relationship are stored.
type mydiscordAliasL struct{}

var (
	mydiscordAliasColumns               = []string{"id", "source", "target", "guild_id"}
	mydiscordAliasColumnsWithoutDefault = []string{"source", "target", "guild_id"}
	mydiscordAliasColumnsWithDefault    = []string{"id"}
	mydiscordAliasPrimaryKeyColumns     = []string{"id"}
)

type (
	// MydiscordAliasSlice is an alias for a slice of pointers to MydiscordAlias.
	// This should generally be used opposed to []MydiscordAlias.
	MydiscordAliasSlice []*MydiscordAlias
	// MydiscordAliasHook is the signature for custom MydiscordAlias hook methods
	MydiscordAliasHook func(context.Context, boil.ContextExecutor, *MydiscordAlias) error

	mydiscordAliasQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mydiscordAliasType                 = reflect.TypeOf(&MydiscordAlias{})
	mydiscordAliasMapping              = queries.MakeStructMapping(mydiscordAliasType)
	mydiscordAliasPrimaryKeyMapping, _ = queries.BindMapping(mydiscordAliasType, mydiscordAliasMapping, mydiscordAliasPrimaryKeyColumns)
	mydiscordAliasInsertCacheMut       sync.RWMutex
	mydiscordAliasInsertCache          = make(map[string]insertCache)
	mydiscordAliasUpdateCacheMut       sync.RWMutex
	mydiscordAliasUpdateCache          = make(map[string]updateCache)
	mydiscordAliasUpsertCacheMut       sync.RWMutex
	mydiscordAliasUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var mydiscordAliasBeforeInsertHooks []MydiscordAliasHook
var mydiscordAliasBeforeUpdateHooks []MydiscordAliasHook
var mydiscordAliasBeforeDeleteHooks []MydiscordAliasHook
var mydiscordAliasBeforeUpsertHooks []MydiscordAliasHook

var mydiscordAliasAfterInsertHooks []MydiscordAliasHook
var mydiscordAliasAfterSelectHooks []MydiscordAliasHook
var mydiscordAliasAfterUpdateHooks []MydiscordAliasHook
var mydiscordAliasAfterDeleteHooks []MydiscordAliasHook
var mydiscordAliasAfterUpsertHooks []MydiscordAliasHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MydiscordAlias) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range mydiscordAliasBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MydiscordAlias) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range mydiscordAliasBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MydiscordAlias) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range mydiscordAliasBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MydiscordAlias) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range mydiscordAliasBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MydiscordAlias) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range mydiscordAliasAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MydiscordAlias) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range mydiscordAliasAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MydiscordAlias) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range mydiscordAliasAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MydiscordAlias) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range mydiscordAliasAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MydiscordAlias) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range mydiscordAliasAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMydiscordAliasHook registers your hook function for all future operations.
func AddMydiscordAliasHook(hookPoint boil.HookPoint, mydiscordAliasHook MydiscordAliasHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		mydiscordAliasBeforeInsertHooks = append(mydiscordAliasBeforeInsertHooks, mydiscordAliasHook)
	case boil.BeforeUpdateHook:
		mydiscordAliasBeforeUpdateHooks = append(mydiscordAliasBeforeUpdateHooks, mydiscordAliasHook)
	case boil.BeforeDeleteHook:
		mydiscordAliasBeforeDeleteHooks = append(mydiscordAliasBeforeDeleteHooks, mydiscordAliasHook)
	case boil.BeforeUpsertHook:
		mydiscordAliasBeforeUpsertHooks = append(mydiscordAliasBeforeUpsertHooks, mydiscordAliasHook)
	case boil.AfterInsertHook:
		mydiscordAliasAfterInsertHooks = append(mydiscordAliasAfterInsertHooks, mydiscordAliasHook)
	case boil.AfterSelectHook:
		mydiscordAliasAfterSelectHooks = append(mydiscordAliasAfterSelectHooks, mydiscordAliasHook)
	case boil.AfterUpdateHook:
		mydiscordAliasAfterUpdateHooks = append(mydiscordAliasAfterUpdateHooks, mydiscordAliasHook)
	case boil.AfterDeleteHook:
		mydiscordAliasAfterDeleteHooks = append(mydiscordAliasAfterDeleteHooks, mydiscordAliasHook)
	case boil.AfterUpsertHook:
		mydiscordAliasAfterUpsertHooks = append(mydiscordAliasAfterUpsertHooks, mydiscordAliasHook)
	}
}

// One returns a single mydiscordAlias record from the query.
func (q mydiscordAliasQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MydiscordAlias, error) {
	o := &MydiscordAlias{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for mydiscord_alias")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MydiscordAlias records from the query.
func (q mydiscordAliasQuery) All(ctx context.Context, exec boil.ContextExecutor) (MydiscordAliasSlice, error) {
	var o []*MydiscordAlias

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MydiscordAlias slice")
	}

	if len(mydiscordAliasAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MydiscordAlias records in the query.
func (q mydiscordAliasQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count mydiscord_alias rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mydiscordAliasQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if mydiscord_alias exists")
	}

	return count > 0, nil
}

// Guild pointed to by the foreign key.
func (o *MydiscordAlias) Guild(mods ...qm.QueryMod) mydiscordGuildQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.GuildID),
	}

	queryMods = append(queryMods, mods...)

	query := MydiscordGuilds(queryMods...)
	queries.SetFrom(query.Query, "\"mydiscord_guild\"")

	return query
}

// LoadGuild allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mydiscordAliasL) LoadGuild(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMydiscordAlias interface{}, mods queries.Applicator) error {
	var slice []*MydiscordAlias
	var object *MydiscordAlias

	if singular {
		object = maybeMydiscordAlias.(*MydiscordAlias)
	} else {
		slice = *maybeMydiscordAlias.(*[]*MydiscordAlias)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mydiscordAliasR{}
		}
		args = append(args, object.GuildID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mydiscordAliasR{}
			}

			for _, a := range args {
				if a == obj.GuildID {
					continue Outer
				}
			}

			args = append(args, obj.GuildID)
		}
	}

	query := NewQuery(qm.From(`mydiscord_guild`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MydiscordGuild")
	}

	var resultSlice []*MydiscordGuild
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MydiscordGuild")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mydiscord_guild")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mydiscord_guild")
	}

	if len(mydiscordAliasAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Guild = foreign
		if foreign.R == nil {
			foreign.R = &mydiscordGuildR{}
		}
		foreign.R.GuildMydiscordAliases = append(foreign.R.GuildMydiscordAliases, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GuildID == foreign.ID {
				local.R.Guild = foreign
				if foreign.R == nil {
					foreign.R = &mydiscordGuildR{}
				}
				foreign.R.GuildMydiscordAliases = append(foreign.R.GuildMydiscordAliases, local)
				break
			}
		}
	}

	return nil
}

// SetGuild of the mydiscordAlias to the related item.
// Sets o.R.Guild to related.
// Adds o to related.R.GuildMydiscordAliases.
func (o *MydiscordAlias) SetGuild(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MydiscordGuild) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mydiscord_alias\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"guild_id"}),
		strmangle.WhereClause("\"", "\"", 2, mydiscordAliasPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GuildID = related.ID
	if o.R == nil {
		o.R = &mydiscordAliasR{
			Guild: related,
		}
	} else {
		o.R.Guild = related
	}

	if related.R == nil {
		related.R = &mydiscordGuildR{
			GuildMydiscordAliases: MydiscordAliasSlice{o},
		}
	} else {
		related.R.GuildMydiscordAliases = append(related.R.GuildMydiscordAliases, o)
	}

	return nil
}

// MydiscordAliases retrieves all the records using an executor.
func MydiscordAliases(mods ...qm.QueryMod) mydiscordAliasQuery {
	mods = append(mods, qm.From("\"mydiscord_alias\""))
	return mydiscordAliasQuery{NewQuery(mods...)}
}

// FindMydiscordAlias retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMydiscordAlias(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*MydiscordAlias, error) {
	mydiscordAliasObj := &MydiscordAlias{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"mydiscord_alias\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, mydiscordAliasObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from mydiscord_alias")
	}

	return mydiscordAliasObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MydiscordAlias) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no mydiscord_alias provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mydiscordAliasColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mydiscordAliasInsertCacheMut.RLock()
	cache, cached := mydiscordAliasInsertCache[key]
	mydiscordAliasInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mydiscordAliasColumns,
			mydiscordAliasColumnsWithDefault,
			mydiscordAliasColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mydiscordAliasType, mydiscordAliasMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mydiscordAliasType, mydiscordAliasMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"mydiscord_alias\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"mydiscord_alias\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into mydiscord_alias")
	}

	if !cached {
		mydiscordAliasInsertCacheMut.Lock()
		mydiscordAliasInsertCache[key] = cache
		mydiscordAliasInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MydiscordAlias.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MydiscordAlias) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mydiscordAliasUpdateCacheMut.RLock()
	cache, cached := mydiscordAliasUpdateCache[key]
	mydiscordAliasUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mydiscordAliasColumns,
			mydiscordAliasPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update mydiscord_alias, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"mydiscord_alias\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, mydiscordAliasPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mydiscordAliasType, mydiscordAliasMapping, append(wl, mydiscordAliasPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update mydiscord_alias row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for mydiscord_alias")
	}

	if !cached {
		mydiscordAliasUpdateCacheMut.Lock()
		mydiscordAliasUpdateCache[key] = cache
		mydiscordAliasUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mydiscordAliasQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for mydiscord_alias")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for mydiscord_alias")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MydiscordAliasSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mydiscordAliasPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"mydiscord_alias\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, mydiscordAliasPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in mydiscordAlias slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all mydiscordAlias")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MydiscordAlias) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no mydiscord_alias provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mydiscordAliasColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mydiscordAliasUpsertCacheMut.RLock()
	cache, cached := mydiscordAliasUpsertCache[key]
	mydiscordAliasUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mydiscordAliasColumns,
			mydiscordAliasColumnsWithDefault,
			mydiscordAliasColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			mydiscordAliasColumns,
			mydiscordAliasPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert mydiscord_alias, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(mydiscordAliasPrimaryKeyColumns))
			copy(conflict, mydiscordAliasPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"mydiscord_alias\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(mydiscordAliasType, mydiscordAliasMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mydiscordAliasType, mydiscordAliasMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert mydiscord_alias")
	}

	if !cached {
		mydiscordAliasUpsertCacheMut.Lock()
		mydiscordAliasUpsertCache[key] = cache
		mydiscordAliasUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MydiscordAlias record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MydiscordAlias) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MydiscordAlias provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mydiscordAliasPrimaryKeyMapping)
	sql := "DELETE FROM \"mydiscord_alias\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from mydiscord_alias")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for mydiscord_alias")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mydiscordAliasQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no mydiscordAliasQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mydiscord_alias")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for mydiscord_alias")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MydiscordAliasSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MydiscordAlias slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(mydiscordAliasBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mydiscordAliasPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"mydiscord_alias\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mydiscordAliasPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mydiscordAlias slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for mydiscord_alias")
	}

	if len(mydiscordAliasAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MydiscordAlias) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMydiscordAlias(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MydiscordAliasSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MydiscordAliasSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mydiscordAliasPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"mydiscord_alias\".* FROM \"mydiscord_alias\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mydiscordAliasPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MydiscordAliasSlice")
	}

	*o = slice

	return nil
}

// MydiscordAliasExists checks if the MydiscordAlias row exists.
func MydiscordAliasExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"mydiscord_alias\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if mydiscord_alias exists")
	}

	return exists, nil
}
