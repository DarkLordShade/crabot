// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// MydiscordGuild is an object representing the database table.
type MydiscordGuild struct {
	ID        int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	DiscordID string `boil:"discord_id" json:"discord_id" toml:"discord_id" yaml:"discord_id"`
	Name      string `boil:"name" json:"name" toml:"name" yaml:"name"`
	Trigger   string `boil:"trigger" json:"trigger" toml:"trigger" yaml:"trigger"`

	R *mydiscordGuildR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L mydiscordGuildL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MydiscordGuildColumns = struct {
	ID        string
	DiscordID string
	Name      string
	Trigger   string
}{
	ID:        "id",
	DiscordID: "discord_id",
	Name:      "name",
	Trigger:   "trigger",
}

// MydiscordGuildRels is where relationship names are stored.
var MydiscordGuildRels = struct {
	GuildMydiscordAliases       string
	GuildMydiscordGuildModules  string
	GuildPublicrolesPublicroles string
}{
	GuildMydiscordAliases:       "GuildMydiscordAliases",
	GuildMydiscordGuildModules:  "GuildMydiscordGuildModules",
	GuildPublicrolesPublicroles: "GuildPublicrolesPublicroles",
}

// mydiscordGuildR is where relationships are stored.
type mydiscordGuildR struct {
	GuildMydiscordAliases       MydiscordAliasSlice
	GuildMydiscordGuildModules  MydiscordGuildModuleSlice
	GuildPublicrolesPublicroles PublicrolesPublicroleSlice
}

// NewStruct creates a new relationship struct
func (*mydiscordGuildR) NewStruct() *mydiscordGuildR {
	return &mydiscordGuildR{}
}

// mydiscordGuildL is where Load methods for each relationship are stored.
type mydiscordGuildL struct{}

var (
	mydiscordGuildColumns               = []string{"id", "discord_id", "name", "trigger"}
	mydiscordGuildColumnsWithoutDefault = []string{"discord_id", "name", "trigger"}
	mydiscordGuildColumnsWithDefault    = []string{"id"}
	mydiscordGuildPrimaryKeyColumns     = []string{"id"}
)

type (
	// MydiscordGuildSlice is an alias for a slice of pointers to MydiscordGuild.
	// This should generally be used opposed to []MydiscordGuild.
	MydiscordGuildSlice []*MydiscordGuild
	// MydiscordGuildHook is the signature for custom MydiscordGuild hook methods
	MydiscordGuildHook func(context.Context, boil.ContextExecutor, *MydiscordGuild) error

	mydiscordGuildQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mydiscordGuildType                 = reflect.TypeOf(&MydiscordGuild{})
	mydiscordGuildMapping              = queries.MakeStructMapping(mydiscordGuildType)
	mydiscordGuildPrimaryKeyMapping, _ = queries.BindMapping(mydiscordGuildType, mydiscordGuildMapping, mydiscordGuildPrimaryKeyColumns)
	mydiscordGuildInsertCacheMut       sync.RWMutex
	mydiscordGuildInsertCache          = make(map[string]insertCache)
	mydiscordGuildUpdateCacheMut       sync.RWMutex
	mydiscordGuildUpdateCache          = make(map[string]updateCache)
	mydiscordGuildUpsertCacheMut       sync.RWMutex
	mydiscordGuildUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var mydiscordGuildBeforeInsertHooks []MydiscordGuildHook
var mydiscordGuildBeforeUpdateHooks []MydiscordGuildHook
var mydiscordGuildBeforeDeleteHooks []MydiscordGuildHook
var mydiscordGuildBeforeUpsertHooks []MydiscordGuildHook

var mydiscordGuildAfterInsertHooks []MydiscordGuildHook
var mydiscordGuildAfterSelectHooks []MydiscordGuildHook
var mydiscordGuildAfterUpdateHooks []MydiscordGuildHook
var mydiscordGuildAfterDeleteHooks []MydiscordGuildHook
var mydiscordGuildAfterUpsertHooks []MydiscordGuildHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MydiscordGuild) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range mydiscordGuildBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MydiscordGuild) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range mydiscordGuildBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MydiscordGuild) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range mydiscordGuildBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MydiscordGuild) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range mydiscordGuildBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MydiscordGuild) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range mydiscordGuildAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MydiscordGuild) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range mydiscordGuildAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MydiscordGuild) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range mydiscordGuildAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MydiscordGuild) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range mydiscordGuildAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MydiscordGuild) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range mydiscordGuildAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMydiscordGuildHook registers your hook function for all future operations.
func AddMydiscordGuildHook(hookPoint boil.HookPoint, mydiscordGuildHook MydiscordGuildHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		mydiscordGuildBeforeInsertHooks = append(mydiscordGuildBeforeInsertHooks, mydiscordGuildHook)
	case boil.BeforeUpdateHook:
		mydiscordGuildBeforeUpdateHooks = append(mydiscordGuildBeforeUpdateHooks, mydiscordGuildHook)
	case boil.BeforeDeleteHook:
		mydiscordGuildBeforeDeleteHooks = append(mydiscordGuildBeforeDeleteHooks, mydiscordGuildHook)
	case boil.BeforeUpsertHook:
		mydiscordGuildBeforeUpsertHooks = append(mydiscordGuildBeforeUpsertHooks, mydiscordGuildHook)
	case boil.AfterInsertHook:
		mydiscordGuildAfterInsertHooks = append(mydiscordGuildAfterInsertHooks, mydiscordGuildHook)
	case boil.AfterSelectHook:
		mydiscordGuildAfterSelectHooks = append(mydiscordGuildAfterSelectHooks, mydiscordGuildHook)
	case boil.AfterUpdateHook:
		mydiscordGuildAfterUpdateHooks = append(mydiscordGuildAfterUpdateHooks, mydiscordGuildHook)
	case boil.AfterDeleteHook:
		mydiscordGuildAfterDeleteHooks = append(mydiscordGuildAfterDeleteHooks, mydiscordGuildHook)
	case boil.AfterUpsertHook:
		mydiscordGuildAfterUpsertHooks = append(mydiscordGuildAfterUpsertHooks, mydiscordGuildHook)
	}
}

// One returns a single mydiscordGuild record from the query.
func (q mydiscordGuildQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MydiscordGuild, error) {
	o := &MydiscordGuild{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for mydiscord_guild")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MydiscordGuild records from the query.
func (q mydiscordGuildQuery) All(ctx context.Context, exec boil.ContextExecutor) (MydiscordGuildSlice, error) {
	var o []*MydiscordGuild

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MydiscordGuild slice")
	}

	if len(mydiscordGuildAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MydiscordGuild records in the query.
func (q mydiscordGuildQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count mydiscord_guild rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mydiscordGuildQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if mydiscord_guild exists")
	}

	return count > 0, nil
}

// GuildMydiscordAliases retrieves all the mydiscord_alias's MydiscordAliases with an executor via guild_id column.
func (o *MydiscordGuild) GuildMydiscordAliases(mods ...qm.QueryMod) mydiscordAliasQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"mydiscord_alias\".\"guild_id\"=?", o.ID),
	)

	query := MydiscordAliases(queryMods...)
	queries.SetFrom(query.Query, "\"mydiscord_alias\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"mydiscord_alias\".*"})
	}

	return query
}

// GuildMydiscordGuildModules retrieves all the mydiscord_guild_module's MydiscordGuildModules with an executor via guild_id column.
func (o *MydiscordGuild) GuildMydiscordGuildModules(mods ...qm.QueryMod) mydiscordGuildModuleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"mydiscord_guild_modules\".\"guild_id\"=?", o.ID),
	)

	query := MydiscordGuildModules(queryMods...)
	queries.SetFrom(query.Query, "\"mydiscord_guild_modules\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"mydiscord_guild_modules\".*"})
	}

	return query
}

// GuildPublicrolesPublicroles retrieves all the publicroles_publicrole's PublicrolesPublicroles with an executor via guild_id column.
func (o *MydiscordGuild) GuildPublicrolesPublicroles(mods ...qm.QueryMod) publicrolesPublicroleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"publicroles_publicrole\".\"guild_id\"=?", o.ID),
	)

	query := PublicrolesPublicroles(queryMods...)
	queries.SetFrom(query.Query, "\"publicroles_publicrole\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"publicroles_publicrole\".*"})
	}

	return query
}

// LoadGuildMydiscordAliases allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mydiscordGuildL) LoadGuildMydiscordAliases(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMydiscordGuild interface{}, mods queries.Applicator) error {
	var slice []*MydiscordGuild
	var object *MydiscordGuild

	if singular {
		object = maybeMydiscordGuild.(*MydiscordGuild)
	} else {
		slice = *maybeMydiscordGuild.(*[]*MydiscordGuild)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mydiscordGuildR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mydiscordGuildR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`mydiscord_alias`), qm.WhereIn(`guild_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load mydiscord_alias")
	}

	var resultSlice []*MydiscordAlias
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice mydiscord_alias")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on mydiscord_alias")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mydiscord_alias")
	}

	if len(mydiscordAliasAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GuildMydiscordAliases = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mydiscordAliasR{}
			}
			foreign.R.Guild = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.GuildID {
				local.R.GuildMydiscordAliases = append(local.R.GuildMydiscordAliases, foreign)
				if foreign.R == nil {
					foreign.R = &mydiscordAliasR{}
				}
				foreign.R.Guild = local
				break
			}
		}
	}

	return nil
}

// LoadGuildMydiscordGuildModules allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mydiscordGuildL) LoadGuildMydiscordGuildModules(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMydiscordGuild interface{}, mods queries.Applicator) error {
	var slice []*MydiscordGuild
	var object *MydiscordGuild

	if singular {
		object = maybeMydiscordGuild.(*MydiscordGuild)
	} else {
		slice = *maybeMydiscordGuild.(*[]*MydiscordGuild)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mydiscordGuildR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mydiscordGuildR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`mydiscord_guild_modules`), qm.WhereIn(`guild_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load mydiscord_guild_modules")
	}

	var resultSlice []*MydiscordGuildModule
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice mydiscord_guild_modules")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on mydiscord_guild_modules")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mydiscord_guild_modules")
	}

	if len(mydiscordGuildModuleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GuildMydiscordGuildModules = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mydiscordGuildModuleR{}
			}
			foreign.R.Guild = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.GuildID {
				local.R.GuildMydiscordGuildModules = append(local.R.GuildMydiscordGuildModules, foreign)
				if foreign.R == nil {
					foreign.R = &mydiscordGuildModuleR{}
				}
				foreign.R.Guild = local
				break
			}
		}
	}

	return nil
}

// LoadGuildPublicrolesPublicroles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mydiscordGuildL) LoadGuildPublicrolesPublicroles(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMydiscordGuild interface{}, mods queries.Applicator) error {
	var slice []*MydiscordGuild
	var object *MydiscordGuild

	if singular {
		object = maybeMydiscordGuild.(*MydiscordGuild)
	} else {
		slice = *maybeMydiscordGuild.(*[]*MydiscordGuild)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mydiscordGuildR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mydiscordGuildR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`publicroles_publicrole`), qm.WhereIn(`guild_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load publicroles_publicrole")
	}

	var resultSlice []*PublicrolesPublicrole
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice publicroles_publicrole")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on publicroles_publicrole")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for publicroles_publicrole")
	}

	if len(publicrolesPublicroleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GuildPublicrolesPublicroles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &publicrolesPublicroleR{}
			}
			foreign.R.Guild = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.GuildID {
				local.R.GuildPublicrolesPublicroles = append(local.R.GuildPublicrolesPublicroles, foreign)
				if foreign.R == nil {
					foreign.R = &publicrolesPublicroleR{}
				}
				foreign.R.Guild = local
				break
			}
		}
	}

	return nil
}

// AddGuildMydiscordAliases adds the given related objects to the existing relationships
// of the mydiscord_guild, optionally inserting them as new records.
// Appends related to o.R.GuildMydiscordAliases.
// Sets related.R.Guild appropriately.
func (o *MydiscordGuild) AddGuildMydiscordAliases(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MydiscordAlias) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GuildID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"mydiscord_alias\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"guild_id"}),
				strmangle.WhereClause("\"", "\"", 2, mydiscordAliasPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GuildID = o.ID
		}
	}

	if o.R == nil {
		o.R = &mydiscordGuildR{
			GuildMydiscordAliases: related,
		}
	} else {
		o.R.GuildMydiscordAliases = append(o.R.GuildMydiscordAliases, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mydiscordAliasR{
				Guild: o,
			}
		} else {
			rel.R.Guild = o
		}
	}
	return nil
}

// AddGuildMydiscordGuildModules adds the given related objects to the existing relationships
// of the mydiscord_guild, optionally inserting them as new records.
// Appends related to o.R.GuildMydiscordGuildModules.
// Sets related.R.Guild appropriately.
func (o *MydiscordGuild) AddGuildMydiscordGuildModules(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MydiscordGuildModule) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GuildID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"mydiscord_guild_modules\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"guild_id"}),
				strmangle.WhereClause("\"", "\"", 2, mydiscordGuildModulePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GuildID = o.ID
		}
	}

	if o.R == nil {
		o.R = &mydiscordGuildR{
			GuildMydiscordGuildModules: related,
		}
	} else {
		o.R.GuildMydiscordGuildModules = append(o.R.GuildMydiscordGuildModules, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mydiscordGuildModuleR{
				Guild: o,
			}
		} else {
			rel.R.Guild = o
		}
	}
	return nil
}

// AddGuildPublicrolesPublicroles adds the given related objects to the existing relationships
// of the mydiscord_guild, optionally inserting them as new records.
// Appends related to o.R.GuildPublicrolesPublicroles.
// Sets related.R.Guild appropriately.
func (o *MydiscordGuild) AddGuildPublicrolesPublicroles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*PublicrolesPublicrole) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GuildID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"publicroles_publicrole\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"guild_id"}),
				strmangle.WhereClause("\"", "\"", 2, publicrolesPublicrolePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GuildID = o.ID
		}
	}

	if o.R == nil {
		o.R = &mydiscordGuildR{
			GuildPublicrolesPublicroles: related,
		}
	} else {
		o.R.GuildPublicrolesPublicroles = append(o.R.GuildPublicrolesPublicroles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &publicrolesPublicroleR{
				Guild: o,
			}
		} else {
			rel.R.Guild = o
		}
	}
	return nil
}

// MydiscordGuilds retrieves all the records using an executor.
func MydiscordGuilds(mods ...qm.QueryMod) mydiscordGuildQuery {
	mods = append(mods, qm.From("\"mydiscord_guild\""))
	return mydiscordGuildQuery{NewQuery(mods...)}
}

// FindMydiscordGuild retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMydiscordGuild(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*MydiscordGuild, error) {
	mydiscordGuildObj := &MydiscordGuild{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"mydiscord_guild\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, mydiscordGuildObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from mydiscord_guild")
	}

	return mydiscordGuildObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MydiscordGuild) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no mydiscord_guild provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mydiscordGuildColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mydiscordGuildInsertCacheMut.RLock()
	cache, cached := mydiscordGuildInsertCache[key]
	mydiscordGuildInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mydiscordGuildColumns,
			mydiscordGuildColumnsWithDefault,
			mydiscordGuildColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mydiscordGuildType, mydiscordGuildMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mydiscordGuildType, mydiscordGuildMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"mydiscord_guild\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"mydiscord_guild\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into mydiscord_guild")
	}

	if !cached {
		mydiscordGuildInsertCacheMut.Lock()
		mydiscordGuildInsertCache[key] = cache
		mydiscordGuildInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MydiscordGuild.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MydiscordGuild) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mydiscordGuildUpdateCacheMut.RLock()
	cache, cached := mydiscordGuildUpdateCache[key]
	mydiscordGuildUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mydiscordGuildColumns,
			mydiscordGuildPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update mydiscord_guild, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"mydiscord_guild\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, mydiscordGuildPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mydiscordGuildType, mydiscordGuildMapping, append(wl, mydiscordGuildPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update mydiscord_guild row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for mydiscord_guild")
	}

	if !cached {
		mydiscordGuildUpdateCacheMut.Lock()
		mydiscordGuildUpdateCache[key] = cache
		mydiscordGuildUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mydiscordGuildQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for mydiscord_guild")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for mydiscord_guild")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MydiscordGuildSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mydiscordGuildPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"mydiscord_guild\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, mydiscordGuildPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in mydiscordGuild slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all mydiscordGuild")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MydiscordGuild) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no mydiscord_guild provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mydiscordGuildColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mydiscordGuildUpsertCacheMut.RLock()
	cache, cached := mydiscordGuildUpsertCache[key]
	mydiscordGuildUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mydiscordGuildColumns,
			mydiscordGuildColumnsWithDefault,
			mydiscordGuildColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			mydiscordGuildColumns,
			mydiscordGuildPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert mydiscord_guild, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(mydiscordGuildPrimaryKeyColumns))
			copy(conflict, mydiscordGuildPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"mydiscord_guild\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(mydiscordGuildType, mydiscordGuildMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mydiscordGuildType, mydiscordGuildMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert mydiscord_guild")
	}

	if !cached {
		mydiscordGuildUpsertCacheMut.Lock()
		mydiscordGuildUpsertCache[key] = cache
		mydiscordGuildUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MydiscordGuild record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MydiscordGuild) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MydiscordGuild provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mydiscordGuildPrimaryKeyMapping)
	sql := "DELETE FROM \"mydiscord_guild\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from mydiscord_guild")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for mydiscord_guild")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mydiscordGuildQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no mydiscordGuildQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mydiscord_guild")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for mydiscord_guild")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MydiscordGuildSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MydiscordGuild slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(mydiscordGuildBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mydiscordGuildPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"mydiscord_guild\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mydiscordGuildPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mydiscordGuild slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for mydiscord_guild")
	}

	if len(mydiscordGuildAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MydiscordGuild) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMydiscordGuild(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MydiscordGuildSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MydiscordGuildSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mydiscordGuildPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"mydiscord_guild\".* FROM \"mydiscord_guild\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mydiscordGuildPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MydiscordGuildSlice")
	}

	*o = slice

	return nil
}

// MydiscordGuildExists checks if the MydiscordGuild row exists.
func MydiscordGuildExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"mydiscord_guild\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if mydiscord_guild exists")
	}

	return exists, nil
}
