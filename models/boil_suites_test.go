// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("CommandAliases", testCommandAliases)
	t.Run("Guilds", testGuilds)
	t.Run("GuildModules", testGuildModules)
	t.Run("Modules", testModules)
	t.Run("Publicroles", testPublicroles)
}

func TestDelete(t *testing.T) {
	t.Run("CommandAliases", testCommandAliasesDelete)
	t.Run("Guilds", testGuildsDelete)
	t.Run("GuildModules", testGuildModulesDelete)
	t.Run("Modules", testModulesDelete)
	t.Run("Publicroles", testPublicrolesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("CommandAliases", testCommandAliasesQueryDeleteAll)
	t.Run("Guilds", testGuildsQueryDeleteAll)
	t.Run("GuildModules", testGuildModulesQueryDeleteAll)
	t.Run("Modules", testModulesQueryDeleteAll)
	t.Run("Publicroles", testPublicrolesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("CommandAliases", testCommandAliasesSliceDeleteAll)
	t.Run("Guilds", testGuildsSliceDeleteAll)
	t.Run("GuildModules", testGuildModulesSliceDeleteAll)
	t.Run("Modules", testModulesSliceDeleteAll)
	t.Run("Publicroles", testPublicrolesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("CommandAliases", testCommandAliasesExists)
	t.Run("Guilds", testGuildsExists)
	t.Run("GuildModules", testGuildModulesExists)
	t.Run("Modules", testModulesExists)
	t.Run("Publicroles", testPublicrolesExists)
}

func TestFind(t *testing.T) {
	t.Run("CommandAliases", testCommandAliasesFind)
	t.Run("Guilds", testGuildsFind)
	t.Run("GuildModules", testGuildModulesFind)
	t.Run("Modules", testModulesFind)
	t.Run("Publicroles", testPublicrolesFind)
}

func TestBind(t *testing.T) {
	t.Run("CommandAliases", testCommandAliasesBind)
	t.Run("Guilds", testGuildsBind)
	t.Run("GuildModules", testGuildModulesBind)
	t.Run("Modules", testModulesBind)
	t.Run("Publicroles", testPublicrolesBind)
}

func TestOne(t *testing.T) {
	t.Run("CommandAliases", testCommandAliasesOne)
	t.Run("Guilds", testGuildsOne)
	t.Run("GuildModules", testGuildModulesOne)
	t.Run("Modules", testModulesOne)
	t.Run("Publicroles", testPublicrolesOne)
}

func TestAll(t *testing.T) {
	t.Run("CommandAliases", testCommandAliasesAll)
	t.Run("Guilds", testGuildsAll)
	t.Run("GuildModules", testGuildModulesAll)
	t.Run("Modules", testModulesAll)
	t.Run("Publicroles", testPublicrolesAll)
}

func TestCount(t *testing.T) {
	t.Run("CommandAliases", testCommandAliasesCount)
	t.Run("Guilds", testGuildsCount)
	t.Run("GuildModules", testGuildModulesCount)
	t.Run("Modules", testModulesCount)
	t.Run("Publicroles", testPublicrolesCount)
}

func TestHooks(t *testing.T) {
	t.Run("CommandAliases", testCommandAliasesHooks)
	t.Run("Guilds", testGuildsHooks)
	t.Run("GuildModules", testGuildModulesHooks)
	t.Run("Modules", testModulesHooks)
	t.Run("Publicroles", testPublicrolesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("CommandAliases", testCommandAliasesInsert)
	t.Run("CommandAliases", testCommandAliasesInsertWhitelist)
	t.Run("Guilds", testGuildsInsert)
	t.Run("Guilds", testGuildsInsertWhitelist)
	t.Run("GuildModules", testGuildModulesInsert)
	t.Run("GuildModules", testGuildModulesInsertWhitelist)
	t.Run("Modules", testModulesInsert)
	t.Run("Modules", testModulesInsertWhitelist)
	t.Run("Publicroles", testPublicrolesInsert)
	t.Run("Publicroles", testPublicrolesInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("CommandAliasToGuildUsingGuild", testCommandAliasToOneGuildUsingGuild)
	t.Run("GuildModuleToGuildUsingGuild", testGuildModuleToOneGuildUsingGuild)
	t.Run("GuildModuleToModuleUsingModule", testGuildModuleToOneModuleUsingModule)
	t.Run("PublicroleToGuildUsingGuild", testPublicroleToOneGuildUsingGuild)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("GuildToCommandAliases", testGuildToManyCommandAliases)
	t.Run("GuildToGuildModules", testGuildToManyGuildModules)
	t.Run("GuildToPublicroles", testGuildToManyPublicroles)
	t.Run("ModuleToGuildModules", testModuleToManyGuildModules)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("CommandAliasToGuildUsingCommandAliases", testCommandAliasToOneSetOpGuildUsingGuild)
	t.Run("GuildModuleToGuildUsingGuildModules", testGuildModuleToOneSetOpGuildUsingGuild)
	t.Run("GuildModuleToModuleUsingGuildModules", testGuildModuleToOneSetOpModuleUsingModule)
	t.Run("PublicroleToGuildUsingPublicroles", testPublicroleToOneSetOpGuildUsingGuild)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("GuildToCommandAliases", testGuildToManyAddOpCommandAliases)
	t.Run("GuildToGuildModules", testGuildToManyAddOpGuildModules)
	t.Run("GuildToPublicroles", testGuildToManyAddOpPublicroles)
	t.Run("ModuleToGuildModules", testModuleToManyAddOpGuildModules)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("CommandAliases", testCommandAliasesReload)
	t.Run("Guilds", testGuildsReload)
	t.Run("GuildModules", testGuildModulesReload)
	t.Run("Modules", testModulesReload)
	t.Run("Publicroles", testPublicrolesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("CommandAliases", testCommandAliasesReloadAll)
	t.Run("Guilds", testGuildsReloadAll)
	t.Run("GuildModules", testGuildModulesReloadAll)
	t.Run("Modules", testModulesReloadAll)
	t.Run("Publicroles", testPublicrolesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("CommandAliases", testCommandAliasesSelect)
	t.Run("Guilds", testGuildsSelect)
	t.Run("GuildModules", testGuildModulesSelect)
	t.Run("Modules", testModulesSelect)
	t.Run("Publicroles", testPublicrolesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("CommandAliases", testCommandAliasesUpdate)
	t.Run("Guilds", testGuildsUpdate)
	t.Run("GuildModules", testGuildModulesUpdate)
	t.Run("Modules", testModulesUpdate)
	t.Run("Publicroles", testPublicrolesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("CommandAliases", testCommandAliasesSliceUpdateAll)
	t.Run("Guilds", testGuildsSliceUpdateAll)
	t.Run("GuildModules", testGuildModulesSliceUpdateAll)
	t.Run("Modules", testModulesSliceUpdateAll)
	t.Run("Publicroles", testPublicrolesSliceUpdateAll)
}
