// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("AuthGroups", testAuthGroups)
	t.Run("AuthGroupPermissions", testAuthGroupPermissions)
	t.Run("AuthPermissions", testAuthPermissions)
	t.Run("AuthUsers", testAuthUsers)
	t.Run("AuthUserGroups", testAuthUserGroups)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissions)
	t.Run("MydiscordAliases", testMydiscordAliases)
	t.Run("MydiscordGuilds", testMydiscordGuilds)
	t.Run("MydiscordGuildModules", testMydiscordGuildModules)
	t.Run("MydiscordModules", testMydiscordModules)
	t.Run("PublicrolesPublicroles", testPublicrolesPublicroles)
}

func TestDelete(t *testing.T) {
	t.Run("AuthGroups", testAuthGroupsDelete)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsDelete)
	t.Run("AuthPermissions", testAuthPermissionsDelete)
	t.Run("AuthUsers", testAuthUsersDelete)
	t.Run("AuthUserGroups", testAuthUserGroupsDelete)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsDelete)
	t.Run("MydiscordAliases", testMydiscordAliasesDelete)
	t.Run("MydiscordGuilds", testMydiscordGuildsDelete)
	t.Run("MydiscordGuildModules", testMydiscordGuildModulesDelete)
	t.Run("MydiscordModules", testMydiscordModulesDelete)
	t.Run("PublicrolesPublicroles", testPublicrolesPublicrolesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("AuthGroups", testAuthGroupsQueryDeleteAll)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsQueryDeleteAll)
	t.Run("AuthPermissions", testAuthPermissionsQueryDeleteAll)
	t.Run("AuthUsers", testAuthUsersQueryDeleteAll)
	t.Run("AuthUserGroups", testAuthUserGroupsQueryDeleteAll)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsQueryDeleteAll)
	t.Run("MydiscordAliases", testMydiscordAliasesQueryDeleteAll)
	t.Run("MydiscordGuilds", testMydiscordGuildsQueryDeleteAll)
	t.Run("MydiscordGuildModules", testMydiscordGuildModulesQueryDeleteAll)
	t.Run("MydiscordModules", testMydiscordModulesQueryDeleteAll)
	t.Run("PublicrolesPublicroles", testPublicrolesPublicrolesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("AuthGroups", testAuthGroupsSliceDeleteAll)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsSliceDeleteAll)
	t.Run("AuthPermissions", testAuthPermissionsSliceDeleteAll)
	t.Run("AuthUsers", testAuthUsersSliceDeleteAll)
	t.Run("AuthUserGroups", testAuthUserGroupsSliceDeleteAll)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsSliceDeleteAll)
	t.Run("MydiscordAliases", testMydiscordAliasesSliceDeleteAll)
	t.Run("MydiscordGuilds", testMydiscordGuildsSliceDeleteAll)
	t.Run("MydiscordGuildModules", testMydiscordGuildModulesSliceDeleteAll)
	t.Run("MydiscordModules", testMydiscordModulesSliceDeleteAll)
	t.Run("PublicrolesPublicroles", testPublicrolesPublicrolesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("AuthGroups", testAuthGroupsExists)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsExists)
	t.Run("AuthPermissions", testAuthPermissionsExists)
	t.Run("AuthUsers", testAuthUsersExists)
	t.Run("AuthUserGroups", testAuthUserGroupsExists)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsExists)
	t.Run("MydiscordAliases", testMydiscordAliasesExists)
	t.Run("MydiscordGuilds", testMydiscordGuildsExists)
	t.Run("MydiscordGuildModules", testMydiscordGuildModulesExists)
	t.Run("MydiscordModules", testMydiscordModulesExists)
	t.Run("PublicrolesPublicroles", testPublicrolesPublicrolesExists)
}

func TestFind(t *testing.T) {
	t.Run("AuthGroups", testAuthGroupsFind)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsFind)
	t.Run("AuthPermissions", testAuthPermissionsFind)
	t.Run("AuthUsers", testAuthUsersFind)
	t.Run("AuthUserGroups", testAuthUserGroupsFind)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsFind)
	t.Run("MydiscordAliases", testMydiscordAliasesFind)
	t.Run("MydiscordGuilds", testMydiscordGuildsFind)
	t.Run("MydiscordGuildModules", testMydiscordGuildModulesFind)
	t.Run("MydiscordModules", testMydiscordModulesFind)
	t.Run("PublicrolesPublicroles", testPublicrolesPublicrolesFind)
}

func TestBind(t *testing.T) {
	t.Run("AuthGroups", testAuthGroupsBind)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsBind)
	t.Run("AuthPermissions", testAuthPermissionsBind)
	t.Run("AuthUsers", testAuthUsersBind)
	t.Run("AuthUserGroups", testAuthUserGroupsBind)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsBind)
	t.Run("MydiscordAliases", testMydiscordAliasesBind)
	t.Run("MydiscordGuilds", testMydiscordGuildsBind)
	t.Run("MydiscordGuildModules", testMydiscordGuildModulesBind)
	t.Run("MydiscordModules", testMydiscordModulesBind)
	t.Run("PublicrolesPublicroles", testPublicrolesPublicrolesBind)
}

func TestOne(t *testing.T) {
	t.Run("AuthGroups", testAuthGroupsOne)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsOne)
	t.Run("AuthPermissions", testAuthPermissionsOne)
	t.Run("AuthUsers", testAuthUsersOne)
	t.Run("AuthUserGroups", testAuthUserGroupsOne)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsOne)
	t.Run("MydiscordAliases", testMydiscordAliasesOne)
	t.Run("MydiscordGuilds", testMydiscordGuildsOne)
	t.Run("MydiscordGuildModules", testMydiscordGuildModulesOne)
	t.Run("MydiscordModules", testMydiscordModulesOne)
	t.Run("PublicrolesPublicroles", testPublicrolesPublicrolesOne)
}

func TestAll(t *testing.T) {
	t.Run("AuthGroups", testAuthGroupsAll)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsAll)
	t.Run("AuthPermissions", testAuthPermissionsAll)
	t.Run("AuthUsers", testAuthUsersAll)
	t.Run("AuthUserGroups", testAuthUserGroupsAll)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsAll)
	t.Run("MydiscordAliases", testMydiscordAliasesAll)
	t.Run("MydiscordGuilds", testMydiscordGuildsAll)
	t.Run("MydiscordGuildModules", testMydiscordGuildModulesAll)
	t.Run("MydiscordModules", testMydiscordModulesAll)
	t.Run("PublicrolesPublicroles", testPublicrolesPublicrolesAll)
}

func TestCount(t *testing.T) {
	t.Run("AuthGroups", testAuthGroupsCount)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsCount)
	t.Run("AuthPermissions", testAuthPermissionsCount)
	t.Run("AuthUsers", testAuthUsersCount)
	t.Run("AuthUserGroups", testAuthUserGroupsCount)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsCount)
	t.Run("MydiscordAliases", testMydiscordAliasesCount)
	t.Run("MydiscordGuilds", testMydiscordGuildsCount)
	t.Run("MydiscordGuildModules", testMydiscordGuildModulesCount)
	t.Run("MydiscordModules", testMydiscordModulesCount)
	t.Run("PublicrolesPublicroles", testPublicrolesPublicrolesCount)
}

func TestHooks(t *testing.T) {
	t.Run("AuthGroups", testAuthGroupsHooks)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsHooks)
	t.Run("AuthPermissions", testAuthPermissionsHooks)
	t.Run("AuthUsers", testAuthUsersHooks)
	t.Run("AuthUserGroups", testAuthUserGroupsHooks)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsHooks)
	t.Run("MydiscordAliases", testMydiscordAliasesHooks)
	t.Run("MydiscordGuilds", testMydiscordGuildsHooks)
	t.Run("MydiscordGuildModules", testMydiscordGuildModulesHooks)
	t.Run("MydiscordModules", testMydiscordModulesHooks)
	t.Run("PublicrolesPublicroles", testPublicrolesPublicrolesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("AuthGroups", testAuthGroupsInsert)
	t.Run("AuthGroups", testAuthGroupsInsertWhitelist)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsInsert)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsInsertWhitelist)
	t.Run("AuthPermissions", testAuthPermissionsInsert)
	t.Run("AuthPermissions", testAuthPermissionsInsertWhitelist)
	t.Run("AuthUsers", testAuthUsersInsert)
	t.Run("AuthUsers", testAuthUsersInsertWhitelist)
	t.Run("AuthUserGroups", testAuthUserGroupsInsert)
	t.Run("AuthUserGroups", testAuthUserGroupsInsertWhitelist)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsInsert)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsInsertWhitelist)
	t.Run("MydiscordAliases", testMydiscordAliasesInsert)
	t.Run("MydiscordAliases", testMydiscordAliasesInsertWhitelist)
	t.Run("MydiscordGuilds", testMydiscordGuildsInsert)
	t.Run("MydiscordGuilds", testMydiscordGuildsInsertWhitelist)
	t.Run("MydiscordGuildModules", testMydiscordGuildModulesInsert)
	t.Run("MydiscordGuildModules", testMydiscordGuildModulesInsertWhitelist)
	t.Run("MydiscordModules", testMydiscordModulesInsert)
	t.Run("MydiscordModules", testMydiscordModulesInsertWhitelist)
	t.Run("PublicrolesPublicroles", testPublicrolesPublicrolesInsert)
	t.Run("PublicrolesPublicroles", testPublicrolesPublicrolesInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("AuthGroupPermissionToAuthGroupUsingGroup", testAuthGroupPermissionToOneAuthGroupUsingGroup)
	t.Run("AuthGroupPermissionToAuthPermissionUsingPermission", testAuthGroupPermissionToOneAuthPermissionUsingPermission)
	t.Run("AuthUserGroupToAuthUserUsingUser", testAuthUserGroupToOneAuthUserUsingUser)
	t.Run("AuthUserGroupToAuthGroupUsingGroup", testAuthUserGroupToOneAuthGroupUsingGroup)
	t.Run("AuthUserUserPermissionToAuthUserUsingUser", testAuthUserUserPermissionToOneAuthUserUsingUser)
	t.Run("AuthUserUserPermissionToAuthPermissionUsingPermission", testAuthUserUserPermissionToOneAuthPermissionUsingPermission)
	t.Run("MydiscordAliasToMydiscordGuildUsingGuild", testMydiscordAliasToOneMydiscordGuildUsingGuild)
	t.Run("MydiscordGuildModuleToMydiscordGuildUsingGuild", testMydiscordGuildModuleToOneMydiscordGuildUsingGuild)
	t.Run("MydiscordGuildModuleToMydiscordModuleUsingModule", testMydiscordGuildModuleToOneMydiscordModuleUsingModule)
	t.Run("PublicrolesPublicroleToMydiscordGuildUsingGuild", testPublicrolesPublicroleToOneMydiscordGuildUsingGuild)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("AuthGroupToGroupAuthGroupPermissions", testAuthGroupToManyGroupAuthGroupPermissions)
	t.Run("AuthGroupToGroupAuthUserGroups", testAuthGroupToManyGroupAuthUserGroups)
	t.Run("AuthPermissionToPermissionAuthGroupPermissions", testAuthPermissionToManyPermissionAuthGroupPermissions)
	t.Run("AuthPermissionToPermissionAuthUserUserPermissions", testAuthPermissionToManyPermissionAuthUserUserPermissions)
	t.Run("AuthUserToUserAuthUserGroups", testAuthUserToManyUserAuthUserGroups)
	t.Run("AuthUserToUserAuthUserUserPermissions", testAuthUserToManyUserAuthUserUserPermissions)
	t.Run("MydiscordGuildToGuildMydiscordAliases", testMydiscordGuildToManyGuildMydiscordAliases)
	t.Run("MydiscordGuildToGuildMydiscordGuildModules", testMydiscordGuildToManyGuildMydiscordGuildModules)
	t.Run("MydiscordGuildToGuildPublicrolesPublicroles", testMydiscordGuildToManyGuildPublicrolesPublicroles)
	t.Run("MydiscordModuleToModuleMydiscordGuildModules", testMydiscordModuleToManyModuleMydiscordGuildModules)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("AuthGroupPermissionToAuthGroupUsingGroupAuthGroupPermissions", testAuthGroupPermissionToOneSetOpAuthGroupUsingGroup)
	t.Run("AuthGroupPermissionToAuthPermissionUsingPermissionAuthGroupPermissions", testAuthGroupPermissionToOneSetOpAuthPermissionUsingPermission)
	t.Run("AuthUserGroupToAuthUserUsingUserAuthUserGroups", testAuthUserGroupToOneSetOpAuthUserUsingUser)
	t.Run("AuthUserGroupToAuthGroupUsingGroupAuthUserGroups", testAuthUserGroupToOneSetOpAuthGroupUsingGroup)
	t.Run("AuthUserUserPermissionToAuthUserUsingUserAuthUserUserPermissions", testAuthUserUserPermissionToOneSetOpAuthUserUsingUser)
	t.Run("AuthUserUserPermissionToAuthPermissionUsingPermissionAuthUserUserPermissions", testAuthUserUserPermissionToOneSetOpAuthPermissionUsingPermission)
	t.Run("MydiscordAliasToMydiscordGuildUsingGuildMydiscordAliases", testMydiscordAliasToOneSetOpMydiscordGuildUsingGuild)
	t.Run("MydiscordGuildModuleToMydiscordGuildUsingGuildMydiscordGuildModules", testMydiscordGuildModuleToOneSetOpMydiscordGuildUsingGuild)
	t.Run("MydiscordGuildModuleToMydiscordModuleUsingModuleMydiscordGuildModules", testMydiscordGuildModuleToOneSetOpMydiscordModuleUsingModule)
	t.Run("PublicrolesPublicroleToMydiscordGuildUsingGuildPublicrolesPublicroles", testPublicrolesPublicroleToOneSetOpMydiscordGuildUsingGuild)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("AuthGroupToGroupAuthGroupPermissions", testAuthGroupToManyAddOpGroupAuthGroupPermissions)
	t.Run("AuthGroupToGroupAuthUserGroups", testAuthGroupToManyAddOpGroupAuthUserGroups)
	t.Run("AuthPermissionToPermissionAuthGroupPermissions", testAuthPermissionToManyAddOpPermissionAuthGroupPermissions)
	t.Run("AuthPermissionToPermissionAuthUserUserPermissions", testAuthPermissionToManyAddOpPermissionAuthUserUserPermissions)
	t.Run("AuthUserToUserAuthUserGroups", testAuthUserToManyAddOpUserAuthUserGroups)
	t.Run("AuthUserToUserAuthUserUserPermissions", testAuthUserToManyAddOpUserAuthUserUserPermissions)
	t.Run("MydiscordGuildToGuildMydiscordAliases", testMydiscordGuildToManyAddOpGuildMydiscordAliases)
	t.Run("MydiscordGuildToGuildMydiscordGuildModules", testMydiscordGuildToManyAddOpGuildMydiscordGuildModules)
	t.Run("MydiscordGuildToGuildPublicrolesPublicroles", testMydiscordGuildToManyAddOpGuildPublicrolesPublicroles)
	t.Run("MydiscordModuleToModuleMydiscordGuildModules", testMydiscordModuleToManyAddOpModuleMydiscordGuildModules)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("AuthGroups", testAuthGroupsReload)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsReload)
	t.Run("AuthPermissions", testAuthPermissionsReload)
	t.Run("AuthUsers", testAuthUsersReload)
	t.Run("AuthUserGroups", testAuthUserGroupsReload)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsReload)
	t.Run("MydiscordAliases", testMydiscordAliasesReload)
	t.Run("MydiscordGuilds", testMydiscordGuildsReload)
	t.Run("MydiscordGuildModules", testMydiscordGuildModulesReload)
	t.Run("MydiscordModules", testMydiscordModulesReload)
	t.Run("PublicrolesPublicroles", testPublicrolesPublicrolesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("AuthGroups", testAuthGroupsReloadAll)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsReloadAll)
	t.Run("AuthPermissions", testAuthPermissionsReloadAll)
	t.Run("AuthUsers", testAuthUsersReloadAll)
	t.Run("AuthUserGroups", testAuthUserGroupsReloadAll)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsReloadAll)
	t.Run("MydiscordAliases", testMydiscordAliasesReloadAll)
	t.Run("MydiscordGuilds", testMydiscordGuildsReloadAll)
	t.Run("MydiscordGuildModules", testMydiscordGuildModulesReloadAll)
	t.Run("MydiscordModules", testMydiscordModulesReloadAll)
	t.Run("PublicrolesPublicroles", testPublicrolesPublicrolesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("AuthGroups", testAuthGroupsSelect)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsSelect)
	t.Run("AuthPermissions", testAuthPermissionsSelect)
	t.Run("AuthUsers", testAuthUsersSelect)
	t.Run("AuthUserGroups", testAuthUserGroupsSelect)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsSelect)
	t.Run("MydiscordAliases", testMydiscordAliasesSelect)
	t.Run("MydiscordGuilds", testMydiscordGuildsSelect)
	t.Run("MydiscordGuildModules", testMydiscordGuildModulesSelect)
	t.Run("MydiscordModules", testMydiscordModulesSelect)
	t.Run("PublicrolesPublicroles", testPublicrolesPublicrolesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("AuthGroups", testAuthGroupsUpdate)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsUpdate)
	t.Run("AuthPermissions", testAuthPermissionsUpdate)
	t.Run("AuthUsers", testAuthUsersUpdate)
	t.Run("AuthUserGroups", testAuthUserGroupsUpdate)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsUpdate)
	t.Run("MydiscordAliases", testMydiscordAliasesUpdate)
	t.Run("MydiscordGuilds", testMydiscordGuildsUpdate)
	t.Run("MydiscordGuildModules", testMydiscordGuildModulesUpdate)
	t.Run("MydiscordModules", testMydiscordModulesUpdate)
	t.Run("PublicrolesPublicroles", testPublicrolesPublicrolesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("AuthGroups", testAuthGroupsSliceUpdateAll)
	t.Run("AuthGroupPermissions", testAuthGroupPermissionsSliceUpdateAll)
	t.Run("AuthPermissions", testAuthPermissionsSliceUpdateAll)
	t.Run("AuthUsers", testAuthUsersSliceUpdateAll)
	t.Run("AuthUserGroups", testAuthUserGroupsSliceUpdateAll)
	t.Run("AuthUserUserPermissions", testAuthUserUserPermissionsSliceUpdateAll)
	t.Run("MydiscordAliases", testMydiscordAliasesSliceUpdateAll)
	t.Run("MydiscordGuilds", testMydiscordGuildsSliceUpdateAll)
	t.Run("MydiscordGuildModules", testMydiscordGuildModulesSliceUpdateAll)
	t.Run("MydiscordModules", testMydiscordModulesSliceUpdateAll)
	t.Run("PublicrolesPublicroles", testPublicrolesPublicrolesSliceUpdateAll)
}
