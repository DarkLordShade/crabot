// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// PublicrolesPublicrole is an object representing the database table.
type PublicrolesPublicrole struct {
	ID        int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	DiscordID string `boil:"discord_id" json:"discord_id" toml:"discord_id" yaml:"discord_id"`
	GuildID   int    `boil:"guild_id" json:"guild_id" toml:"guild_id" yaml:"guild_id"`

	R *publicrolesPublicroleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L publicrolesPublicroleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PublicrolesPublicroleColumns = struct {
	ID        string
	DiscordID string
	GuildID   string
}{
	ID:        "id",
	DiscordID: "discord_id",
	GuildID:   "guild_id",
}

// PublicrolesPublicroleRels is where relationship names are stored.
var PublicrolesPublicroleRels = struct {
	Guild string
}{
	Guild: "Guild",
}

// publicrolesPublicroleR is where relationships are stored.
type publicrolesPublicroleR struct {
	Guild *MydiscordGuild
}

// NewStruct creates a new relationship struct
func (*publicrolesPublicroleR) NewStruct() *publicrolesPublicroleR {
	return &publicrolesPublicroleR{}
}

// publicrolesPublicroleL is where Load methods for each relationship are stored.
type publicrolesPublicroleL struct{}

var (
	publicrolesPublicroleColumns               = []string{"id", "discord_id", "guild_id"}
	publicrolesPublicroleColumnsWithoutDefault = []string{"discord_id", "guild_id"}
	publicrolesPublicroleColumnsWithDefault    = []string{"id"}
	publicrolesPublicrolePrimaryKeyColumns     = []string{"id"}
)

type (
	// PublicrolesPublicroleSlice is an alias for a slice of pointers to PublicrolesPublicrole.
	// This should generally be used opposed to []PublicrolesPublicrole.
	PublicrolesPublicroleSlice []*PublicrolesPublicrole
	// PublicrolesPublicroleHook is the signature for custom PublicrolesPublicrole hook methods
	PublicrolesPublicroleHook func(context.Context, boil.ContextExecutor, *PublicrolesPublicrole) error

	publicrolesPublicroleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	publicrolesPublicroleType                 = reflect.TypeOf(&PublicrolesPublicrole{})
	publicrolesPublicroleMapping              = queries.MakeStructMapping(publicrolesPublicroleType)
	publicrolesPublicrolePrimaryKeyMapping, _ = queries.BindMapping(publicrolesPublicroleType, publicrolesPublicroleMapping, publicrolesPublicrolePrimaryKeyColumns)
	publicrolesPublicroleInsertCacheMut       sync.RWMutex
	publicrolesPublicroleInsertCache          = make(map[string]insertCache)
	publicrolesPublicroleUpdateCacheMut       sync.RWMutex
	publicrolesPublicroleUpdateCache          = make(map[string]updateCache)
	publicrolesPublicroleUpsertCacheMut       sync.RWMutex
	publicrolesPublicroleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var publicrolesPublicroleBeforeInsertHooks []PublicrolesPublicroleHook
var publicrolesPublicroleBeforeUpdateHooks []PublicrolesPublicroleHook
var publicrolesPublicroleBeforeDeleteHooks []PublicrolesPublicroleHook
var publicrolesPublicroleBeforeUpsertHooks []PublicrolesPublicroleHook

var publicrolesPublicroleAfterInsertHooks []PublicrolesPublicroleHook
var publicrolesPublicroleAfterSelectHooks []PublicrolesPublicroleHook
var publicrolesPublicroleAfterUpdateHooks []PublicrolesPublicroleHook
var publicrolesPublicroleAfterDeleteHooks []PublicrolesPublicroleHook
var publicrolesPublicroleAfterUpsertHooks []PublicrolesPublicroleHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PublicrolesPublicrole) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range publicrolesPublicroleBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PublicrolesPublicrole) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range publicrolesPublicroleBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PublicrolesPublicrole) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range publicrolesPublicroleBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PublicrolesPublicrole) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range publicrolesPublicroleBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PublicrolesPublicrole) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range publicrolesPublicroleAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PublicrolesPublicrole) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range publicrolesPublicroleAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PublicrolesPublicrole) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range publicrolesPublicroleAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PublicrolesPublicrole) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range publicrolesPublicroleAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PublicrolesPublicrole) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range publicrolesPublicroleAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPublicrolesPublicroleHook registers your hook function for all future operations.
func AddPublicrolesPublicroleHook(hookPoint boil.HookPoint, publicrolesPublicroleHook PublicrolesPublicroleHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		publicrolesPublicroleBeforeInsertHooks = append(publicrolesPublicroleBeforeInsertHooks, publicrolesPublicroleHook)
	case boil.BeforeUpdateHook:
		publicrolesPublicroleBeforeUpdateHooks = append(publicrolesPublicroleBeforeUpdateHooks, publicrolesPublicroleHook)
	case boil.BeforeDeleteHook:
		publicrolesPublicroleBeforeDeleteHooks = append(publicrolesPublicroleBeforeDeleteHooks, publicrolesPublicroleHook)
	case boil.BeforeUpsertHook:
		publicrolesPublicroleBeforeUpsertHooks = append(publicrolesPublicroleBeforeUpsertHooks, publicrolesPublicroleHook)
	case boil.AfterInsertHook:
		publicrolesPublicroleAfterInsertHooks = append(publicrolesPublicroleAfterInsertHooks, publicrolesPublicroleHook)
	case boil.AfterSelectHook:
		publicrolesPublicroleAfterSelectHooks = append(publicrolesPublicroleAfterSelectHooks, publicrolesPublicroleHook)
	case boil.AfterUpdateHook:
		publicrolesPublicroleAfterUpdateHooks = append(publicrolesPublicroleAfterUpdateHooks, publicrolesPublicroleHook)
	case boil.AfterDeleteHook:
		publicrolesPublicroleAfterDeleteHooks = append(publicrolesPublicroleAfterDeleteHooks, publicrolesPublicroleHook)
	case boil.AfterUpsertHook:
		publicrolesPublicroleAfterUpsertHooks = append(publicrolesPublicroleAfterUpsertHooks, publicrolesPublicroleHook)
	}
}

// One returns a single publicrolesPublicrole record from the query.
func (q publicrolesPublicroleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PublicrolesPublicrole, error) {
	o := &PublicrolesPublicrole{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for publicroles_publicrole")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PublicrolesPublicrole records from the query.
func (q publicrolesPublicroleQuery) All(ctx context.Context, exec boil.ContextExecutor) (PublicrolesPublicroleSlice, error) {
	var o []*PublicrolesPublicrole

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PublicrolesPublicrole slice")
	}

	if len(publicrolesPublicroleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PublicrolesPublicrole records in the query.
func (q publicrolesPublicroleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count publicroles_publicrole rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q publicrolesPublicroleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if publicroles_publicrole exists")
	}

	return count > 0, nil
}

// Guild pointed to by the foreign key.
func (o *PublicrolesPublicrole) Guild(mods ...qm.QueryMod) mydiscordGuildQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.GuildID),
	}

	queryMods = append(queryMods, mods...)

	query := MydiscordGuilds(queryMods...)
	queries.SetFrom(query.Query, "\"mydiscord_guild\"")

	return query
}

// LoadGuild allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (publicrolesPublicroleL) LoadGuild(ctx context.Context, e boil.ContextExecutor, singular bool, maybePublicrolesPublicrole interface{}, mods queries.Applicator) error {
	var slice []*PublicrolesPublicrole
	var object *PublicrolesPublicrole

	if singular {
		object = maybePublicrolesPublicrole.(*PublicrolesPublicrole)
	} else {
		slice = *maybePublicrolesPublicrole.(*[]*PublicrolesPublicrole)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &publicrolesPublicroleR{}
		}
		args = append(args, object.GuildID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &publicrolesPublicroleR{}
			}

			for _, a := range args {
				if a == obj.GuildID {
					continue Outer
				}
			}

			args = append(args, obj.GuildID)
		}
	}

	query := NewQuery(qm.From(`mydiscord_guild`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MydiscordGuild")
	}

	var resultSlice []*MydiscordGuild
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MydiscordGuild")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for mydiscord_guild")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mydiscord_guild")
	}

	if len(publicrolesPublicroleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Guild = foreign
		if foreign.R == nil {
			foreign.R = &mydiscordGuildR{}
		}
		foreign.R.GuildPublicrolesPublicroles = append(foreign.R.GuildPublicrolesPublicroles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GuildID == foreign.ID {
				local.R.Guild = foreign
				if foreign.R == nil {
					foreign.R = &mydiscordGuildR{}
				}
				foreign.R.GuildPublicrolesPublicroles = append(foreign.R.GuildPublicrolesPublicroles, local)
				break
			}
		}
	}

	return nil
}

// SetGuild of the publicrolesPublicrole to the related item.
// Sets o.R.Guild to related.
// Adds o to related.R.GuildPublicrolesPublicroles.
func (o *PublicrolesPublicrole) SetGuild(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MydiscordGuild) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"publicroles_publicrole\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"guild_id"}),
		strmangle.WhereClause("\"", "\"", 2, publicrolesPublicrolePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GuildID = related.ID
	if o.R == nil {
		o.R = &publicrolesPublicroleR{
			Guild: related,
		}
	} else {
		o.R.Guild = related
	}

	if related.R == nil {
		related.R = &mydiscordGuildR{
			GuildPublicrolesPublicroles: PublicrolesPublicroleSlice{o},
		}
	} else {
		related.R.GuildPublicrolesPublicroles = append(related.R.GuildPublicrolesPublicroles, o)
	}

	return nil
}

// PublicrolesPublicroles retrieves all the records using an executor.
func PublicrolesPublicroles(mods ...qm.QueryMod) publicrolesPublicroleQuery {
	mods = append(mods, qm.From("\"publicroles_publicrole\""))
	return publicrolesPublicroleQuery{NewQuery(mods...)}
}

// FindPublicrolesPublicrole retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPublicrolesPublicrole(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PublicrolesPublicrole, error) {
	publicrolesPublicroleObj := &PublicrolesPublicrole{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"publicroles_publicrole\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, publicrolesPublicroleObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from publicroles_publicrole")
	}

	return publicrolesPublicroleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PublicrolesPublicrole) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no publicroles_publicrole provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(publicrolesPublicroleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	publicrolesPublicroleInsertCacheMut.RLock()
	cache, cached := publicrolesPublicroleInsertCache[key]
	publicrolesPublicroleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			publicrolesPublicroleColumns,
			publicrolesPublicroleColumnsWithDefault,
			publicrolesPublicroleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(publicrolesPublicroleType, publicrolesPublicroleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(publicrolesPublicroleType, publicrolesPublicroleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"publicroles_publicrole\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"publicroles_publicrole\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into publicroles_publicrole")
	}

	if !cached {
		publicrolesPublicroleInsertCacheMut.Lock()
		publicrolesPublicroleInsertCache[key] = cache
		publicrolesPublicroleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the PublicrolesPublicrole.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PublicrolesPublicrole) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	publicrolesPublicroleUpdateCacheMut.RLock()
	cache, cached := publicrolesPublicroleUpdateCache[key]
	publicrolesPublicroleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			publicrolesPublicroleColumns,
			publicrolesPublicrolePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update publicroles_publicrole, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"publicroles_publicrole\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, publicrolesPublicrolePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(publicrolesPublicroleType, publicrolesPublicroleMapping, append(wl, publicrolesPublicrolePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update publicroles_publicrole row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for publicroles_publicrole")
	}

	if !cached {
		publicrolesPublicroleUpdateCacheMut.Lock()
		publicrolesPublicroleUpdateCache[key] = cache
		publicrolesPublicroleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q publicrolesPublicroleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for publicroles_publicrole")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for publicroles_publicrole")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PublicrolesPublicroleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), publicrolesPublicrolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"publicroles_publicrole\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, publicrolesPublicrolePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in publicrolesPublicrole slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all publicrolesPublicrole")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PublicrolesPublicrole) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no publicroles_publicrole provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(publicrolesPublicroleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	publicrolesPublicroleUpsertCacheMut.RLock()
	cache, cached := publicrolesPublicroleUpsertCache[key]
	publicrolesPublicroleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			publicrolesPublicroleColumns,
			publicrolesPublicroleColumnsWithDefault,
			publicrolesPublicroleColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			publicrolesPublicroleColumns,
			publicrolesPublicrolePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert publicroles_publicrole, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(publicrolesPublicrolePrimaryKeyColumns))
			copy(conflict, publicrolesPublicrolePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"publicroles_publicrole\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(publicrolesPublicroleType, publicrolesPublicroleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(publicrolesPublicroleType, publicrolesPublicroleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert publicroles_publicrole")
	}

	if !cached {
		publicrolesPublicroleUpsertCacheMut.Lock()
		publicrolesPublicroleUpsertCache[key] = cache
		publicrolesPublicroleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single PublicrolesPublicrole record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PublicrolesPublicrole) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PublicrolesPublicrole provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), publicrolesPublicrolePrimaryKeyMapping)
	sql := "DELETE FROM \"publicroles_publicrole\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from publicroles_publicrole")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for publicroles_publicrole")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q publicrolesPublicroleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no publicrolesPublicroleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from publicroles_publicrole")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for publicroles_publicrole")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PublicrolesPublicroleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PublicrolesPublicrole slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(publicrolesPublicroleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), publicrolesPublicrolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"publicroles_publicrole\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, publicrolesPublicrolePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from publicrolesPublicrole slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for publicroles_publicrole")
	}

	if len(publicrolesPublicroleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PublicrolesPublicrole) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPublicrolesPublicrole(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PublicrolesPublicroleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PublicrolesPublicroleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), publicrolesPublicrolePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"publicroles_publicrole\".* FROM \"publicroles_publicrole\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, publicrolesPublicrolePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PublicrolesPublicroleSlice")
	}

	*o = slice

	return nil
}

// PublicrolesPublicroleExists checks if the PublicrolesPublicrole row exists.
func PublicrolesPublicroleExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"publicroles_publicrole\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if publicroles_publicrole exists")
	}

	return exists, nil
}
