// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// MydiscordModule is an object representing the database table.
type MydiscordModule struct {
	ID   int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name string `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *mydiscordModuleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L mydiscordModuleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MydiscordModuleColumns = struct {
	ID   string
	Name string
}{
	ID:   "id",
	Name: "name",
}

// MydiscordModuleRels is where relationship names are stored.
var MydiscordModuleRels = struct {
	ModuleMydiscordGuildModules string
}{
	ModuleMydiscordGuildModules: "ModuleMydiscordGuildModules",
}

// mydiscordModuleR is where relationships are stored.
type mydiscordModuleR struct {
	ModuleMydiscordGuildModules MydiscordGuildModuleSlice
}

// NewStruct creates a new relationship struct
func (*mydiscordModuleR) NewStruct() *mydiscordModuleR {
	return &mydiscordModuleR{}
}

// mydiscordModuleL is where Load methods for each relationship are stored.
type mydiscordModuleL struct{}

var (
	mydiscordModuleColumns               = []string{"id", "name"}
	mydiscordModuleColumnsWithoutDefault = []string{"name"}
	mydiscordModuleColumnsWithDefault    = []string{"id"}
	mydiscordModulePrimaryKeyColumns     = []string{"id"}
)

type (
	// MydiscordModuleSlice is an alias for a slice of pointers to MydiscordModule.
	// This should generally be used opposed to []MydiscordModule.
	MydiscordModuleSlice []*MydiscordModule
	// MydiscordModuleHook is the signature for custom MydiscordModule hook methods
	MydiscordModuleHook func(context.Context, boil.ContextExecutor, *MydiscordModule) error

	mydiscordModuleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mydiscordModuleType                 = reflect.TypeOf(&MydiscordModule{})
	mydiscordModuleMapping              = queries.MakeStructMapping(mydiscordModuleType)
	mydiscordModulePrimaryKeyMapping, _ = queries.BindMapping(mydiscordModuleType, mydiscordModuleMapping, mydiscordModulePrimaryKeyColumns)
	mydiscordModuleInsertCacheMut       sync.RWMutex
	mydiscordModuleInsertCache          = make(map[string]insertCache)
	mydiscordModuleUpdateCacheMut       sync.RWMutex
	mydiscordModuleUpdateCache          = make(map[string]updateCache)
	mydiscordModuleUpsertCacheMut       sync.RWMutex
	mydiscordModuleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var mydiscordModuleBeforeInsertHooks []MydiscordModuleHook
var mydiscordModuleBeforeUpdateHooks []MydiscordModuleHook
var mydiscordModuleBeforeDeleteHooks []MydiscordModuleHook
var mydiscordModuleBeforeUpsertHooks []MydiscordModuleHook

var mydiscordModuleAfterInsertHooks []MydiscordModuleHook
var mydiscordModuleAfterSelectHooks []MydiscordModuleHook
var mydiscordModuleAfterUpdateHooks []MydiscordModuleHook
var mydiscordModuleAfterDeleteHooks []MydiscordModuleHook
var mydiscordModuleAfterUpsertHooks []MydiscordModuleHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MydiscordModule) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range mydiscordModuleBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MydiscordModule) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range mydiscordModuleBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MydiscordModule) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range mydiscordModuleBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MydiscordModule) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range mydiscordModuleBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MydiscordModule) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range mydiscordModuleAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MydiscordModule) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range mydiscordModuleAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MydiscordModule) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range mydiscordModuleAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MydiscordModule) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range mydiscordModuleAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MydiscordModule) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	for _, hook := range mydiscordModuleAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMydiscordModuleHook registers your hook function for all future operations.
func AddMydiscordModuleHook(hookPoint boil.HookPoint, mydiscordModuleHook MydiscordModuleHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		mydiscordModuleBeforeInsertHooks = append(mydiscordModuleBeforeInsertHooks, mydiscordModuleHook)
	case boil.BeforeUpdateHook:
		mydiscordModuleBeforeUpdateHooks = append(mydiscordModuleBeforeUpdateHooks, mydiscordModuleHook)
	case boil.BeforeDeleteHook:
		mydiscordModuleBeforeDeleteHooks = append(mydiscordModuleBeforeDeleteHooks, mydiscordModuleHook)
	case boil.BeforeUpsertHook:
		mydiscordModuleBeforeUpsertHooks = append(mydiscordModuleBeforeUpsertHooks, mydiscordModuleHook)
	case boil.AfterInsertHook:
		mydiscordModuleAfterInsertHooks = append(mydiscordModuleAfterInsertHooks, mydiscordModuleHook)
	case boil.AfterSelectHook:
		mydiscordModuleAfterSelectHooks = append(mydiscordModuleAfterSelectHooks, mydiscordModuleHook)
	case boil.AfterUpdateHook:
		mydiscordModuleAfterUpdateHooks = append(mydiscordModuleAfterUpdateHooks, mydiscordModuleHook)
	case boil.AfterDeleteHook:
		mydiscordModuleAfterDeleteHooks = append(mydiscordModuleAfterDeleteHooks, mydiscordModuleHook)
	case boil.AfterUpsertHook:
		mydiscordModuleAfterUpsertHooks = append(mydiscordModuleAfterUpsertHooks, mydiscordModuleHook)
	}
}

// One returns a single mydiscordModule record from the query.
func (q mydiscordModuleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MydiscordModule, error) {
	o := &MydiscordModule{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for mydiscord_module")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MydiscordModule records from the query.
func (q mydiscordModuleQuery) All(ctx context.Context, exec boil.ContextExecutor) (MydiscordModuleSlice, error) {
	var o []*MydiscordModule

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MydiscordModule slice")
	}

	if len(mydiscordModuleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MydiscordModule records in the query.
func (q mydiscordModuleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count mydiscord_module rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mydiscordModuleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if mydiscord_module exists")
	}

	return count > 0, nil
}

// ModuleMydiscordGuildModules retrieves all the mydiscord_guild_module's MydiscordGuildModules with an executor via module_id column.
func (o *MydiscordModule) ModuleMydiscordGuildModules(mods ...qm.QueryMod) mydiscordGuildModuleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"mydiscord_guild_modules\".\"module_id\"=?", o.ID),
	)

	query := MydiscordGuildModules(queryMods...)
	queries.SetFrom(query.Query, "\"mydiscord_guild_modules\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"mydiscord_guild_modules\".*"})
	}

	return query
}

// LoadModuleMydiscordGuildModules allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (mydiscordModuleL) LoadModuleMydiscordGuildModules(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMydiscordModule interface{}, mods queries.Applicator) error {
	var slice []*MydiscordModule
	var object *MydiscordModule

	if singular {
		object = maybeMydiscordModule.(*MydiscordModule)
	} else {
		slice = *maybeMydiscordModule.(*[]*MydiscordModule)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mydiscordModuleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mydiscordModuleR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`mydiscord_guild_modules`), qm.WhereIn(`module_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load mydiscord_guild_modules")
	}

	var resultSlice []*MydiscordGuildModule
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice mydiscord_guild_modules")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on mydiscord_guild_modules")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mydiscord_guild_modules")
	}

	if len(mydiscordGuildModuleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ModuleMydiscordGuildModules = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mydiscordGuildModuleR{}
			}
			foreign.R.Module = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ModuleID {
				local.R.ModuleMydiscordGuildModules = append(local.R.ModuleMydiscordGuildModules, foreign)
				if foreign.R == nil {
					foreign.R = &mydiscordGuildModuleR{}
				}
				foreign.R.Module = local
				break
			}
		}
	}

	return nil
}

// AddModuleMydiscordGuildModules adds the given related objects to the existing relationships
// of the mydiscord_module, optionally inserting them as new records.
// Appends related to o.R.ModuleMydiscordGuildModules.
// Sets related.R.Module appropriately.
func (o *MydiscordModule) AddModuleMydiscordGuildModules(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MydiscordGuildModule) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ModuleID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"mydiscord_guild_modules\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"module_id"}),
				strmangle.WhereClause("\"", "\"", 2, mydiscordGuildModulePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ModuleID = o.ID
		}
	}

	if o.R == nil {
		o.R = &mydiscordModuleR{
			ModuleMydiscordGuildModules: related,
		}
	} else {
		o.R.ModuleMydiscordGuildModules = append(o.R.ModuleMydiscordGuildModules, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mydiscordGuildModuleR{
				Module: o,
			}
		} else {
			rel.R.Module = o
		}
	}
	return nil
}

// MydiscordModules retrieves all the records using an executor.
func MydiscordModules(mods ...qm.QueryMod) mydiscordModuleQuery {
	mods = append(mods, qm.From("\"mydiscord_module\""))
	return mydiscordModuleQuery{NewQuery(mods...)}
}

// FindMydiscordModule retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMydiscordModule(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*MydiscordModule, error) {
	mydiscordModuleObj := &MydiscordModule{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"mydiscord_module\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, mydiscordModuleObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from mydiscord_module")
	}

	return mydiscordModuleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MydiscordModule) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no mydiscord_module provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mydiscordModuleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mydiscordModuleInsertCacheMut.RLock()
	cache, cached := mydiscordModuleInsertCache[key]
	mydiscordModuleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mydiscordModuleColumns,
			mydiscordModuleColumnsWithDefault,
			mydiscordModuleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(mydiscordModuleType, mydiscordModuleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mydiscordModuleType, mydiscordModuleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"mydiscord_module\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"mydiscord_module\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into mydiscord_module")
	}

	if !cached {
		mydiscordModuleInsertCacheMut.Lock()
		mydiscordModuleInsertCache[key] = cache
		mydiscordModuleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MydiscordModule.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MydiscordModule) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mydiscordModuleUpdateCacheMut.RLock()
	cache, cached := mydiscordModuleUpdateCache[key]
	mydiscordModuleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mydiscordModuleColumns,
			mydiscordModulePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update mydiscord_module, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"mydiscord_module\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, mydiscordModulePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mydiscordModuleType, mydiscordModuleMapping, append(wl, mydiscordModulePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update mydiscord_module row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for mydiscord_module")
	}

	if !cached {
		mydiscordModuleUpdateCacheMut.Lock()
		mydiscordModuleUpdateCache[key] = cache
		mydiscordModuleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mydiscordModuleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for mydiscord_module")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for mydiscord_module")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MydiscordModuleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mydiscordModulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"mydiscord_module\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, mydiscordModulePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in mydiscordModule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all mydiscordModule")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MydiscordModule) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no mydiscord_module provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mydiscordModuleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mydiscordModuleUpsertCacheMut.RLock()
	cache, cached := mydiscordModuleUpsertCache[key]
	mydiscordModuleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mydiscordModuleColumns,
			mydiscordModuleColumnsWithDefault,
			mydiscordModuleColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			mydiscordModuleColumns,
			mydiscordModulePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert mydiscord_module, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(mydiscordModulePrimaryKeyColumns))
			copy(conflict, mydiscordModulePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"mydiscord_module\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(mydiscordModuleType, mydiscordModuleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mydiscordModuleType, mydiscordModuleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert mydiscord_module")
	}

	if !cached {
		mydiscordModuleUpsertCacheMut.Lock()
		mydiscordModuleUpsertCache[key] = cache
		mydiscordModuleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MydiscordModule record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MydiscordModule) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MydiscordModule provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mydiscordModulePrimaryKeyMapping)
	sql := "DELETE FROM \"mydiscord_module\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from mydiscord_module")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for mydiscord_module")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mydiscordModuleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no mydiscordModuleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mydiscord_module")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for mydiscord_module")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MydiscordModuleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MydiscordModule slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(mydiscordModuleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mydiscordModulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"mydiscord_module\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mydiscordModulePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mydiscordModule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for mydiscord_module")
	}

	if len(mydiscordModuleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MydiscordModule) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMydiscordModule(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MydiscordModuleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MydiscordModuleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mydiscordModulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"mydiscord_module\".* FROM \"mydiscord_module\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mydiscordModulePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MydiscordModuleSlice")
	}

	*o = slice

	return nil
}

// MydiscordModuleExists checks if the MydiscordModule row exists.
func MydiscordModuleExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"mydiscord_module\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if mydiscord_module exists")
	}

	return exists, nil
}
