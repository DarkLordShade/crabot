// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testMydiscordAliases(t *testing.T) {
	t.Parallel()

	query := MydiscordAliases()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMydiscordAliasesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MydiscordAlias{}
	if err = randomize.Struct(seed, o, mydiscordAliasDBTypes, true, mydiscordAliasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MydiscordAlias struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MydiscordAliases().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMydiscordAliasesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MydiscordAlias{}
	if err = randomize.Struct(seed, o, mydiscordAliasDBTypes, true, mydiscordAliasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MydiscordAlias struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := MydiscordAliases().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MydiscordAliases().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMydiscordAliasesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MydiscordAlias{}
	if err = randomize.Struct(seed, o, mydiscordAliasDBTypes, true, mydiscordAliasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MydiscordAlias struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MydiscordAliasSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := MydiscordAliases().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMydiscordAliasesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MydiscordAlias{}
	if err = randomize.Struct(seed, o, mydiscordAliasDBTypes, true, mydiscordAliasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MydiscordAlias struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := MydiscordAliasExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if MydiscordAlias exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MydiscordAliasExists to return true, but got false.")
	}
}

func testMydiscordAliasesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MydiscordAlias{}
	if err = randomize.Struct(seed, o, mydiscordAliasDBTypes, true, mydiscordAliasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MydiscordAlias struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	mydiscordAliasFound, err := FindMydiscordAlias(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if mydiscordAliasFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMydiscordAliasesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MydiscordAlias{}
	if err = randomize.Struct(seed, o, mydiscordAliasDBTypes, true, mydiscordAliasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MydiscordAlias struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = MydiscordAliases().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testMydiscordAliasesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MydiscordAlias{}
	if err = randomize.Struct(seed, o, mydiscordAliasDBTypes, true, mydiscordAliasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MydiscordAlias struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := MydiscordAliases().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMydiscordAliasesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	mydiscordAliasOne := &MydiscordAlias{}
	mydiscordAliasTwo := &MydiscordAlias{}
	if err = randomize.Struct(seed, mydiscordAliasOne, mydiscordAliasDBTypes, false, mydiscordAliasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MydiscordAlias struct: %s", err)
	}
	if err = randomize.Struct(seed, mydiscordAliasTwo, mydiscordAliasDBTypes, false, mydiscordAliasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MydiscordAlias struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mydiscordAliasOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mydiscordAliasTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MydiscordAliases().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMydiscordAliasesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	mydiscordAliasOne := &MydiscordAlias{}
	mydiscordAliasTwo := &MydiscordAlias{}
	if err = randomize.Struct(seed, mydiscordAliasOne, mydiscordAliasDBTypes, false, mydiscordAliasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MydiscordAlias struct: %s", err)
	}
	if err = randomize.Struct(seed, mydiscordAliasTwo, mydiscordAliasDBTypes, false, mydiscordAliasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MydiscordAlias struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = mydiscordAliasOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = mydiscordAliasTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MydiscordAliases().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func mydiscordAliasBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *MydiscordAlias) error {
	*o = MydiscordAlias{}
	return nil
}

func mydiscordAliasAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *MydiscordAlias) error {
	*o = MydiscordAlias{}
	return nil
}

func mydiscordAliasAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *MydiscordAlias) error {
	*o = MydiscordAlias{}
	return nil
}

func mydiscordAliasBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MydiscordAlias) error {
	*o = MydiscordAlias{}
	return nil
}

func mydiscordAliasAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *MydiscordAlias) error {
	*o = MydiscordAlias{}
	return nil
}

func mydiscordAliasBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MydiscordAlias) error {
	*o = MydiscordAlias{}
	return nil
}

func mydiscordAliasAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *MydiscordAlias) error {
	*o = MydiscordAlias{}
	return nil
}

func mydiscordAliasBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MydiscordAlias) error {
	*o = MydiscordAlias{}
	return nil
}

func mydiscordAliasAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *MydiscordAlias) error {
	*o = MydiscordAlias{}
	return nil
}

func testMydiscordAliasesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &MydiscordAlias{}
	o := &MydiscordAlias{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, mydiscordAliasDBTypes, false); err != nil {
		t.Errorf("Unable to randomize MydiscordAlias object: %s", err)
	}

	AddMydiscordAliasHook(boil.BeforeInsertHook, mydiscordAliasBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	mydiscordAliasBeforeInsertHooks = []MydiscordAliasHook{}

	AddMydiscordAliasHook(boil.AfterInsertHook, mydiscordAliasAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	mydiscordAliasAfterInsertHooks = []MydiscordAliasHook{}

	AddMydiscordAliasHook(boil.AfterSelectHook, mydiscordAliasAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	mydiscordAliasAfterSelectHooks = []MydiscordAliasHook{}

	AddMydiscordAliasHook(boil.BeforeUpdateHook, mydiscordAliasBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	mydiscordAliasBeforeUpdateHooks = []MydiscordAliasHook{}

	AddMydiscordAliasHook(boil.AfterUpdateHook, mydiscordAliasAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	mydiscordAliasAfterUpdateHooks = []MydiscordAliasHook{}

	AddMydiscordAliasHook(boil.BeforeDeleteHook, mydiscordAliasBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	mydiscordAliasBeforeDeleteHooks = []MydiscordAliasHook{}

	AddMydiscordAliasHook(boil.AfterDeleteHook, mydiscordAliasAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	mydiscordAliasAfterDeleteHooks = []MydiscordAliasHook{}

	AddMydiscordAliasHook(boil.BeforeUpsertHook, mydiscordAliasBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	mydiscordAliasBeforeUpsertHooks = []MydiscordAliasHook{}

	AddMydiscordAliasHook(boil.AfterUpsertHook, mydiscordAliasAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	mydiscordAliasAfterUpsertHooks = []MydiscordAliasHook{}
}

func testMydiscordAliasesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MydiscordAlias{}
	if err = randomize.Struct(seed, o, mydiscordAliasDBTypes, true, mydiscordAliasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MydiscordAlias struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MydiscordAliases().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMydiscordAliasesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MydiscordAlias{}
	if err = randomize.Struct(seed, o, mydiscordAliasDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MydiscordAlias struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(mydiscordAliasColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := MydiscordAliases().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMydiscordAliasToOneMydiscordGuildUsingGuild(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local MydiscordAlias
	var foreign MydiscordGuild

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, mydiscordAliasDBTypes, false, mydiscordAliasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MydiscordAlias struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, mydiscordGuildDBTypes, false, mydiscordGuildColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MydiscordGuild struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.GuildID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Guild().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MydiscordAliasSlice{&local}
	if err = local.L.LoadGuild(ctx, tx, false, (*[]*MydiscordAlias)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Guild == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Guild = nil
	if err = local.L.LoadGuild(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Guild == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testMydiscordAliasToOneSetOpMydiscordGuildUsingGuild(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a MydiscordAlias
	var b, c MydiscordGuild

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, mydiscordAliasDBTypes, false, strmangle.SetComplement(mydiscordAliasPrimaryKeyColumns, mydiscordAliasColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, mydiscordGuildDBTypes, false, strmangle.SetComplement(mydiscordGuildPrimaryKeyColumns, mydiscordGuildColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, mydiscordGuildDBTypes, false, strmangle.SetComplement(mydiscordGuildPrimaryKeyColumns, mydiscordGuildColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*MydiscordGuild{&b, &c} {
		err = a.SetGuild(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Guild != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GuildMydiscordAliases[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.GuildID != x.ID {
			t.Error("foreign key was wrong value", a.GuildID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GuildID))
		reflect.Indirect(reflect.ValueOf(&a.GuildID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.GuildID != x.ID {
			t.Error("foreign key was wrong value", a.GuildID, x.ID)
		}
	}
}

func testMydiscordAliasesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MydiscordAlias{}
	if err = randomize.Struct(seed, o, mydiscordAliasDBTypes, true, mydiscordAliasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MydiscordAlias struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMydiscordAliasesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MydiscordAlias{}
	if err = randomize.Struct(seed, o, mydiscordAliasDBTypes, true, mydiscordAliasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MydiscordAlias struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := MydiscordAliasSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testMydiscordAliasesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &MydiscordAlias{}
	if err = randomize.Struct(seed, o, mydiscordAliasDBTypes, true, mydiscordAliasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MydiscordAlias struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := MydiscordAliases().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	mydiscordAliasDBTypes = map[string]string{`GuildID`: `integer`, `ID`: `integer`, `Source`: `character varying`, `Target`: `character varying`}
	_                     = bytes.MinRead
)

func testMydiscordAliasesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(mydiscordAliasPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(mydiscordAliasColumns) == len(mydiscordAliasPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MydiscordAlias{}
	if err = randomize.Struct(seed, o, mydiscordAliasDBTypes, true, mydiscordAliasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MydiscordAlias struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MydiscordAliases().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mydiscordAliasDBTypes, true, mydiscordAliasPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MydiscordAlias struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testMydiscordAliasesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(mydiscordAliasColumns) == len(mydiscordAliasPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &MydiscordAlias{}
	if err = randomize.Struct(seed, o, mydiscordAliasDBTypes, true, mydiscordAliasColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MydiscordAlias struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := MydiscordAliases().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, mydiscordAliasDBTypes, true, mydiscordAliasPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MydiscordAlias struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(mydiscordAliasColumns, mydiscordAliasPrimaryKeyColumns) {
		fields = mydiscordAliasColumns
	} else {
		fields = strmangle.SetComplement(
			mydiscordAliasColumns,
			mydiscordAliasPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := MydiscordAliasSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testMydiscordAliasesUpsert(t *testing.T) {
	t.Parallel()

	if len(mydiscordAliasColumns) == len(mydiscordAliasPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := MydiscordAlias{}
	if err = randomize.Struct(seed, &o, mydiscordAliasDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MydiscordAlias struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MydiscordAlias: %s", err)
	}

	count, err := MydiscordAliases().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, mydiscordAliasDBTypes, false, mydiscordAliasPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize MydiscordAlias struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert MydiscordAlias: %s", err)
	}

	count, err = MydiscordAliases().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
